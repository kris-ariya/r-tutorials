random_set_group <- group[random_within_set] # sort group with random_within_set
id <- 1:30
group <- rep(c("exp1", "exp2", "ctrl"), times = 10)
group
set.seed(2475) # you can pick any value for a seed. This will help when you need to replicate the results.
random_vector <- sample.int(30, size = 30, replace = FALSE)
random_vector
random_group <- group[random_vector]
random_group
cbind(id, random_group)
id <- 1:30
group <- rep(c("exp1", "exp2", "ctrl"), times = 10)
set.seed(2475) # set.seed before a random function.
random_vector <- sample.int(30, size = 30, replace = FALSE)
set <- rep(1:10, each = 3)
set
random_within_set <- order(set, random_vector)
random_within_set
random_set_group <- group[random_within_set] # sort group with random_within_set
cbind(id, random_set_group, set)
donation <- sample.int(153, 500, replace = TRUE)
donation
hist(donation)
donation <- sample.int(153*2, 500, replace = TRUE)
contect <- c(rep("chula", 153), rep("tham", 153))
rep(c("threat","non-threat"), 77)
threat <- rep(c("threat","non-threat"), 77)
threat <- c(rep(c("threat","non-threat"), 76), "threat")
donation <- sample.int(153*2, 500, replace = TRUE)
contect <- c(rep("chula", 153), rep("tham", 153))
threat <- c(rep(c("threat","non-threat"), 153), "threat")
donation <- sample.int(153*2, size = 500, replace = TRUE)
contect <- c(rep("chula", 153), rep("tham", 153))
donation <- sample.int(153*2, size = 500, replace = TRUE)
contect <- c(rep("chula", 153), rep("tham", 153))
threat <- c(rep(c("threat","non-threat"), 153), "threat")
donation <- sample.int(n = 153*2, size = 500, replace = TRUE)
donation <- sample.int(n = 306, size = 500, replace = TRUE)
donation <- sample.int(n = 306, size = 500)
donation <- runif(153 *2, 50, 100)
contect <- c(rep("chula", 153), rep("tham", 153))
threat <- c(rep(c("threat","non-threat"), 153), "threat")
threat <- c(rep(c("threat","non-threat"), 153))
threat
threat <- rep(c("threat","non-threat"), 153)
threat
group_iden <- recp(c("low", "med", "high"), 153)
group_iden <- rep(c("low", "med", "high"), 153)
group_iden <- rep(c("low", "med", "high"), 102)
dat <- data.frame(context, threat, group_iden, donation)
donation <- runif(153 *2, 50, 100)
context <- c(rep("chula", 153), rep("tham", 153))
threat <- rep(c("threat","non-threat"), 153)
group_iden <- rep(c("low", "med", "high"), 102)
dat <- data.frame(context, threat, group_iden, donation)
View(dat)
View(dat)
library(afex)
id <- rep(1:153,2)
don.afex <- aov_car(donation ~ context*threat*group_iden + Error(id/context), data = dat)
dat <- data.frame(id, context, threat, group_iden, donation)
library(afex)
don.afex <- aov_car(donation ~ context*threat*group_iden + Error(id/context), data = dat)
View(dat)
View(dat)
threat <- c(rep(c("threat","non-threat"), 76), "threat")
threat <- rep(c(rep(c("threat","non-threat"), 76), "threat"), 2)
id <- rep(1:153,2)
donation <- runif(153 *2, 50, 100)
context <- c(rep("chula", 153), rep("tham", 153))
threat <- rep(c(rep(c("threat","non-threat"), 76), "threat"), 2)
group_iden <- rep(rep(c("low", "med", "high"), 51),2)
dat <- data.frame(id, context, threat, group_iden, donation)
don.afex <- aov_car(donation ~ context*threat*group_iden + Error(id/context), data = dat)
summary(don.afex)
getwd()
csv.write(dat, "donate.csv")
write.csv(dat, "donate.csv")
pwr.t.test(d=.77, sig.level=.05, power = .9, type = "two.sample", alternative = "greater")
#install.packages("pwr")
library(pwr)
pwr.t.test(d=.77, sig.level=.05, power = .9, type = "two.sample", alternative = "greater")
cohens_d(13.46, 11,23, 4)
cohens_d(13.46, 11,23, 4)
d <- (13.46 - 11.23)/sqrt((4.35^2 + 3.85^2)/2)
d <- (13.46 - 11.23)/sqrt((4.35^2 + 3.85^2)/2)
d
d <- (13.46 - 11.23)/sqrt((4.35^2 + 3.85^2)/2)
d
pwr.t.test(d=d, sig.level=.05, power = .9, type = "two.sample", alternative = "greater")
medium_power <- pwr.t.test(d=.5, sig.level=.05, power = .8, type = "two.sample", alternative = "two.sided")
plot(medium_power)
dat <- read.csv("~/Library/CloudStorage/OneDrive-SharedLibraries-ChulalongkornUniversity/Experimental Design and Analysis.Group - Documents/General/3 Labs/Lab04-One-way ANOVA/Data Lab04-Eyesenck.csv", stringsAsFactors=TRUE)
View(dat)
read.csv("Data Lab04-Eyesenck.csv", stringsAsFactors=TRUE)
boxplot(processlvl ~ recall, dat)
read.csv("Data Lab04-Eyesenck.csv", stringsAsFactors=TRUE)
boxplot(recall ~ processlvl, dat)
# Build aov model
mod <- aov(recall ~ processlvl, data = dat)
# Build aov model
mod <- aov(recall ~ processlvl, data = dat)
summary(mod)
#Homogeneity of variance
leveneTest(mod)
#Homogeneity of variance
library(car)
leveneTest(mod)
# Normality of residual (normality within-groups)
> shapiro.test(mod$residuals)
# Normality of residual (normality within-groups)
shapiro.test(mod$residuals)
car::qqPlot(processlvl ~ recall, dat)
# Normality of residual (normality within-groups)
shapiro.test(mod$residuals)
car::qqPlot(recall ~ processlvl, dat)
read.csv("Data Lab04-Eyesenck.csv", stringsAsFactors=TRUE)
# One-way ANOVA
summary(mod)
# Welch's ANOVA (equal variance not assumed)
oneway.test(recall ~ provesslvl. dat)
# One-way ANOVA
summary(mod)
# Welch's ANOVA (equal variance not assumed)
oneway.test(recall ~ provesslvl, dat)
# One-way ANOVA
summary(mod)
# Welch's ANOVA (equal variance not assumed)
oneway.test(recall ~ processlvl, dat)
#Effect size (eta- and omega-squared)
library(effectsize)
omega_squared(mod)
eta-squared(mod)
#Effect size (eta- and omega-squared)
library(effectsize)
omega_squared(mod)
eta_squared(mod)
psych:describe(recall ~ processlvl, dat)
library(apaTables)
library(psych)
psych:describe(recall ~ processlvl, dat)
psych:describe(mod)
psych:describeBy(recall ~ processlvl, dat)
## Load data
read.csv("Data Lab04-Eyesenck.csv", stringsAsFactors=TRUE)
setwd("~/Library/CloudStorage/OneDrive-SharedLibraries-ChulalongkornUniversity/Experimental Design and Analysis.Group - Documents/General/3 Labs/Lab04-One-way ANOVA")
read.csv("Data Lab04-Eyesenck.csv", stringsAsFactors=TRUE)
## Plot
boxplot(recall ~ processlvl, dat)
source("~/Library/CloudStorage/OneDrive-SharedLibraries-ChulalongkornUniversity/Experimental Design and Analysis.Group - Documents/General/3 Labs/Lab04-One-way ANOVA/Key-Lab04-OneWayANOVA.R", echo=TRUE)
psych:describeBy(recall ~ processlvl, data = dat)
library(psych)
psych:describeBy(recall ~ processlvl, data = dat)
describeBy(recall ~ processlvl, data = dat)
psych::describeBy(recall ~ processlvl, data = dat)
library(psych)
psych::describeBy(recall ~ processlvl, data = dat)
apa.1way.table(mod)
apa.aov.table(mod)
apa.1way.table(iv = processlvl, dv = recall, data = dat)
apa.1way.table(iv = processlvl, dv = recall, data = dat, filename = "descriptive_table.docx")
apa.1way.table(iv = processlvl, dv = recall, data = dat, filename = "descriptive_table.doc")
psych::describeBy(recall ~ processlvl, mat = TRUE, data = dat)
source("~/Library/CloudStorage/OneDrive-SharedLibraries-ChulalongkornUniversity/Experimental Design and Analysis.Group - Documents/General/3 Labs/Lab04-One-way ANOVA/Key-Lab04-OneWayANOVA.R", echo=TRUE)
setwd("~/Library/CloudStorage/OneDrive-ChulalongkornUniversity/Documents/GitHub/r-tutorials")
---
title: 'Lab 04: One-way ANOVA'
data(PlantGrowth)
PlantGrowth
str(PlantGrowth$group) #check if group is a factor.
table(PlantGrowth$group) # equal n for each group
boxplot(weight ~ group, data = PlantGrowth)
library(ggplot2)
ggplot(PlantGrowth, aes(x = group, y = weight)) +
geom_boxplot() +
theme_classic()
ggplot(PlantGrowth, aes(x = group, y = weight, fill = group)) +
geom_violin() +
geom_jitter(width = .15) + #plot data points with random width
theme_classic()
library(psych)
describeBy(weight ~ group, data = PlantGrowth)
#install.packages("effectsize")
library(effectsize)
eta_squared(plant_aov)
data(PlantGrowth)
PlantGrowth
str(PlantGrowth$group) #check structure to see if group is a factor.
table(PlantGrowth$group) # equal n for each group
library(psych)
describeBy(weight ~ group, data = PlantGrowth)
boxplot(weight ~ group, data = PlantGrowth)
library(ggplot2)
ggplot(PlantGrowth, aes(x = group, y = weight)) +
geom_boxplot() +
theme_classic()
ggplot(PlantGrowth, aes(x = group, y = weight, fill = group)) +
geom_violin() +
geom_jitter(width = .15) + #plot data points with random width
theme_classic()
plant_aov <- aov(weight ~ group, data = PlantGrowth)
str(plant_aov) # Look at the structure of aov class object.
summary(plant_aov)
plot(plant_aov)
plot(plant_aov, 1)
#install.packages("car")
library(car)
leveneTest(weight ~ group, data = PlantGrowth)
plot(plant_aov, 2)
# Run Shapiro-Wilk test
shapiro.test(plant_aov$residuals) #Extract residuals from aov object and use them in shapiro.test.
car::qqPlot(weight ~ group, data = PlantGrowth)
summary(plant_aov)
#install.packages("effectsize")
library(effectsize)
eta_squared(plant_aov)
omega_squared(plant_aov)
cohens_f(plant_aov)
## Load data
dat <- read.csv("Data Lab04-Eyesenck.csv", stringsAsFactors=TRUE)
