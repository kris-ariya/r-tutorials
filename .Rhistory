zz <- replace.na(z)
splitbill <- function(x, y) {        # x = bill amount, y = number of persons
each_bill <- floor(x/y)
remain <- x %% y
print(paste("Each person bill is", each_bill, "Baht, and the remainder is", remain, "Baht." ))
}
splitbill(100)     #error
splitbill(500, 3)
splitbill(300, 2)
splitbill(333, 4)
detach("package:dplyr", unload = TRUE)
detach("package:car", unload = TRUE)
library(car)
library(dplyr)
?car::recode
?dplyr::recode
gender <- c("M", "F", "F", "Gay", "Lesbian")
recode(gender, " 'M' = 'Male'; 'F' = 'Female'; else = 'LGBTQ' ")    # recode from car does not work
recode(gender, "M" = "Male", "F" = "Female", .default = "LGBTQ") #default for recode is now from dplyr
dplyr::recode(gender, "M" = "Male", "F" = "Female", .default = "LGBTQ") # same as above
car::recode(gender, " 'M' = 'Male'; 'F' = 'Female'; else = 'LGBTQ' ")       # recode from car
data(attitude)
attitude
row_s <- apply(attitude, 1, sum)      #by row
row_s
col_s <- apply(attitude, 2, sum)      #by column
col_s
rowSums(attitude) # same as above
colSums(attitude) # same as above
col_max <- apply(attitude, 2, max)      #by col
col_max
help(colMax)
data(mtcars)
mtcars
t <- tapply(mtcars$hp, mtcars$cyl, mean)
t
b <- by(mtcars$hp, mtcars$cyl, mean) #better for data frames
b
## aggregate() is better for data frames
?aggregate
aggregate(mtcars$hp, list(mtcars$cyl), mean)
aggregate(hp ~ cyl, mtcars, mean)
aggregate(hp ~ cyl + am, mtcars, mean) # multiple grouping
aggregate(cbind(hp, mpg) ~ cyl + am, mtcars, mean) # multiple grouping & multiple variable to be split
qt(.975, 20)
library(psych)
library(car)
library(carData)
# Import data
prestige <- data("Prestige")
force(Prestige)
# Import data
prestige <- data("Prestige")
force(Prestige)
# Import data
Prestige <- data("Prestige")
# Import data
Prestige <- data("Prestige")
Prestige
# Import data
prestige <- data(Prestige)
# Import data
prestige <- data(Prestige)
force(Prestige)
# Import data
prestige <- data(Prestige)
# Import data
prestige <- carData::Prestige
View(prestige)
View(prestige)
# Import data
prestige <- carData::Prestige
View(prestige)
View(prestige)
# Import data
prestige <- carData::Prestige
str(prestige)
# Import data
depress_data <- carData::Ginzberg
str(prestige)
# Import data
depress_data <- carData::Ginzberg
str(depress_data)
View(depress_data)
View(depress_data)
# Import data
prestige <- carData::Prestige
str(prestige)
# Import data
prestige <- carData::Prestige
str(prestige)
# Import data
dat <- carData::Prestige
str(dat)
pretige_lm <- lm(prestige ~ education + income + women + type, data = dat)
summary(prestige_lm)
# Import data
dat <- carData::Prestige
str(dat)
prestige_lm <- lm(prestige ~ education + income + women + type, data = dat)
summary(prestige_lm)
library(psych)
library(car)
library(carData)
# Import data
dat <- carData::Prestige
str(dat)
prestige_lm <- lm(prestige ~ education + income + women + type, data = dat)
summary(prestige_lm)
plot(prestige_lm)
plot(prestige_lm)
residualPlots(prestige_lm)
mahalanobis(dat$education)
mahalanobis(dat$education, mean(dat$education), sd(dat$education))
mahalanobis(dat$education, mean(dat$education), sd(dat$education))
mahalanobis(dat$education, mean(dat$education), cov(dat$education))
psych::outlier(dat$educati mean(dat$education), cov(dat$education))
psych::outlier(dat$education)
psych::outlier(dat[, 1:2)
psych::outlier(dat[, 1:2])
predictors <- dat[c("education", "income", "women")]
mahananobis(predictors, colMeans(predictors), cov(predictors))
predictors <- dat[c("education", "income", "women")]
mahalanobis(predictors, colMeans(predictors), cov(predictors))
predictors <- dat[c("education", "income", "women")]
maha_distance <- mahalanobis(predictors, colMeans(predictors), cov(predictors))
predictors <- dat[c("education", "income", "women")]
dat$maha_dis <- mahalanobis(predictors, colMeans(predictors), cov(predictors))
head(predictors)
predictors <- dat[c("education", "income", "women")]
dat$maha_dis <- mahalanobis(predictors, colMeans(predictors), cov(predictors))
head(dat$maha_dis)
predictors <- dat[c("education", "income", "women")]
dat$maha_dis <- mahalanobis(predictors, colMeans(predictors), cov(predictors))
head(dat)
install.packages("papaja")
setwd("~/OneDrive - Chulalongkorn University/Documents/GitHub/r-tutorials")
file.create("_footer.html")
ls
ls()
dir()
rmarkdown::render_site()
rmarkdown::render_site()
source("~/Downloads/processv41/PROCESS v4.1 for R/process.R", echo=TRUE)
SDA.Lab.W11.Data <- read.csv("~/Chulalongkorn University/Survey Design and Analysis.Group - Documents/General/LAB/SDA-Lab W11 Mediation Analysis/SDA-Lab-W11-Data.csv", stringsAsFactors=TRUE)
View(SDA.Lab.W11.Data)
setwd("~/Chulalongkorn University/Survey Design and Analysis.Group - Documents/General/LAB/SDA-Lab W11 Mediation Analysis")
engage <- read.csv("SDA-Lab-W11-Data.csv", stringsAsFactors=TRUE)
engage <- read.csv("SDA-Lab-W11-Data.csv", stringsAsFactors=TRUE)
corr(engage[c("teachqual", "skilldev", "stuen")])
View(engage)
View(engage)
lab10 <- read.csv("SDA-Lab-W11-Data.csv")
lab10$Gender <- factor(lab10$Gender, levels = c("male", "female", "lgbtq")) # factorize by yourself to make sure that levels are what you need.
str(lab10$Gender)
# Score items
keys.list <- list(stuen = c("Emo_1","Emo_2","Emo_3","Emo_4",
"Phy_1","Phy_2","Phy_3","Phy_4",
"CogIn_1","CogIn_2","CogIn_3","CogIn_4",
"CogOut_1","CogOut_2","CogOut_3","CogOut_4"),
learnsup = c("LearnSup_1", "LearnSup_2", "LearnSup_3", "LearnSup_4", "LearnSup_5",
"LearnSup_6", "LearnSup_7", "LearnSup_8", "LearnSup_9", "LearnSup_10"),
teachqual = paste0("TeachQual_", 1:10),
learnenga = paste0("LearnEnga_", 1:6),
skilldev = paste0("SkillDev_", 1:8),
learnres = paste0("LearnRes_", 1:7))
stud_scores <- scoreItems(key = keys.list, items = lab10, totals = FALSE, min = 1, max = 5)
lab10 <- cbind(lab10, stud_scores$scores) # attach to data
write.csv(lab10, file = "SDA-Lab-W11_Data.csv")
engage <- read.csv("SDA-Lab-W11-Data.csv", stringsAsFactors=TRUE)
corr(engage[c("teachqual", "skilldev", "stuen")])
engage[c("teachqual", "skilldev", "stuen")]
cor(engage[c("teachqual", "skilldev", "stuen")])
## apaTables
apa.cor.table(engage[c("teachqual", "skilldev", "stuen")])
set.seed(2475)
model <- ' # direct effect
stuen ~ c * teachqual
# mediator
skilldev ~ a * teachqual
studen ~ b * skilldev
# indirect effect (a*b)
ab := a*b
# total effect
total := c + (a*b)
'
fit <- sem(model, data = engage)
summary(fit)
library(lavaan)
set.seed(2475)
model <- ' # direct effect
stuen ~ c * teachqual
# mediator
skilldev ~ a * teachqual
studen ~ b * skilldev
# indirect effect (a*b)
ab := a*b
# total effect
total := c + (a*b)
'
fit <- sem(model, data = engage)
summary(fit)
set.seed(2475)
model <- ' # direct effect
stuen ~ c * teachqual
# mediator
skilldev ~ a * teachqual
stuen ~ b * skilldev
# indirect effect (a*b)
ab := a*b
# total effect
total := c + (a*b)
'
fit <- sem(model, data = engage)
summary(fit)
source("~/Downloads/processv41/PROCESS v4.1 for R/process.R", echo=TRUE)
View(process)
View(process)
set.seed(2475)
model <- ' # direct effect
stuen ~ c * teachqual
# mediator
skilldev ~ a * teachqual
stuen ~ b * skilldev
# indirect effect (a*b)
ab := a*b
# total effect
total := c + (a*b)
'
fit <- sem(model, data = engage, se = "bootstrap")
summary(fit)
summary(fit)
set.seed(2475)
model <- ' # direct effect
stuen ~ c * teachqual
# mediator
skilldev ~ a * teachqual
stuen ~ b * skilldev
# indirect effect (a*b)
ab := a*b
# total effect
total := c + (a*b)
'
fit <- sem(model, data = engage, se = "bootstrap", boot.ci.type = "bca.simple", bootstrap = 5000))
summary(fit)
set.seed(2475)
model <- ' # direct effect
stuen ~ c * teachqual
# mediator
skilldev ~ a * teachqual
stuen ~ b * skilldev
# indirect effect (a*b)
ab := a*b
# total effect
total := c + (a*b)
'
fit <- sem(model, data = engage, se = "bootstrap", boot.ci.type = "bca.simple", bootstrap = 5000)
summary(fit)
set.seed(2475)
model <- ' # direct effect
stuen ~ c * teachqual
# mediator
skilldev ~ a * teachqual
stuen ~ b * skilldev
# indirect effect (a*b)
ab := a*b
# total effect
total := c + (a*b)
'
fit <- sem(model, data = engage, se = "bootstrap", bootstrap = 5000)
summary(fit)
# Mediation with process.R
process(data = engage, y = "stuen", x = "teachqual", m = "skilldev", model = 4, boot = 5000, seed = 2475)
fit <- sem(model, data = engage, se = "bootstrap", boot.ci.type = "norm", bootstrap = 5000)
install.packages(c("afex", "lavaan"))
install.packages(c("afex", "lavaan"))
install.packages(c("afex", "lavaan"))
library(apaTables)
library(lavaan)
set.seed(2475)
model <- ' # direct effect
stuen ~ c * teachqual
# mediator
skilldev ~ a * teachqual
stuen ~ b * skilldev
# indirect effect (a*b)
ab := a*b
# total effect
total := c + (a*b)
'
fit <- sem(model, data = engage, se = "bootstrap", boot.ci.type = "norm", bootstrap = 5000)
summary(fit)
fit <- sem(model, data = engage, se = "bootstrap", ci = TRUE, boot.ci.type = "norm", bootstrap = 5000)
set.seed(2475)
model <- ' # direct effect
stuen ~ c * teachqual
# mediator
skilldev ~ a * teachqual
stuen ~ b * skilldev
# indirect effect (a*b)
ab := a*b
# total effect
total := c + (a*b)
'
fit <- sem(model, data = engage, se = "bootstrap", bootstrap = 5000)
summary(fit)
summary(fit, rsquare = TRUE)
parameterEstimates(fit, se = TRUE, boot.ci.type = "perc")
# Mediation with process.R
process(data = engage, y = "stuen", x = "teachqual", m = "skilldev", model = 4, boot = 5000, seed = 2475)
parameterEstimates(fit, se = TRUE, boot.ci.type = "bca.simple")
parameterEstimates(fit, se = TRUE, boot.ci.type = "basic")
parameterEstimates(fit, se = TRUE, boot.ci.type = "perc")
parameterEstimates(fit, se = TRUE, boot.ci.type = "norm")
set.seed(2475)
model <- ' # direct effect
stuen ~ c * teachqual
# mediator
skilldev ~ a * teachqual
stuen ~ b * skilldev
# indirect effect (a*b)
ab := a*b
# total effect
total := c + (a*b)
'
fit <- sem(model, data = engage, se = "bootstrap", bootstrap = 5000)
summary(fit, rsquare = TRUE)
parameterEstimates(fit, se = TRUE, boot.ci.type = "perc")
# Mediation with process.R
process(data = engage, y = "stuen", x = "teachqual", m = "skilldev", model = 4, boot = 5000, seed = 2475)
parameterEstimates(fit, se = TRUE, boot.ci.type = "bca.simple")
parameterEstimates(fit, se = TRUE, boot.ci.type = "all")
parameterEstimates(fit, se = TRUE, boot.ci.type = "norm")
parameterEstimates(fit, se = TRUE, boot.ci.type = "basic")
parameterEstimates(fit, se = TRUE, boot.ci.type = "stud")
parameterEstimates(fit, se = TRUE, boot.ci.type = "perc")
parameterEstimates(fit, se = TRUE, boot.ci.type = "bca")
parameterEstimates(fit, se = TRUE, boot.ci.type = "bca.simple")
parameterEstimates(fit, se = TRUE, boot.ci.type = "perc")
summary(fit, rsquare = TRUE)
set.seed(2475)
model <- ' # direct effect
stuen ~ c * teachqual
direct := c
# mediator
skilldev ~ a * teachqual
stuen ~ b * skilldev
# indirect effect (a*b)
indirect := a*b
# total effect
total := c + (a*b)
'
fit <- sem(model, data = engage, se = "bootstrap", bootstrap = 5000)
summary(fit, rsquare = TRUE)
parameterEstimates(fit, se = TRUE, boot.ci.type = "perc")
set.seed(2475)
model <- ' # direct effect
stuen ~ c * teachqual + b * skilldev
direct := c
# mediator
skilldev ~ a * teachqual
# indirect effect (a*b)
indirect := a*b
# total effect
total := c + (a*b)
'
fit <- sem(model, data = engage, se = "bootstrap", bootstrap = 5000)
summary(fit, rsquare = TRUE)
parameterEstimates(fit, se = TRUE, boot.ci.type = "perc")
set.seed(2475)
model <- ' # Regression models
skilldev ~ a * teachqual
stuen ~ c * teachqual + b * skilldev
# direct effect
direct := c
# indirect effect (a*b)
indirect := a*b
# total effect
total := c + (a*b)
'
fit <- sem(model, data = engage, se = "bootstrap", bootstrap = 5000)
summary(fit, rsquare = TRUE)
parameterEstimates(fit, se = TRUE, boot.ci.type = "perc")
# Mediation with process.R
process(data = engage, y = "stuen", x = "teachqual", m = "skilldev", model = 4, boot = 5000, seed = 2475)
summary(fit, ci = TRUE, rsquare = TRUE)
parameterEstimates(fit, se = TRUE, boot.ci.type = "perc")
summary(fit, ci = TRUE, boot.ci.type = "perc", rsquare = TRUE)
summary(fit, fit.measures = TRUE, ci = TRUE, rsquare = TRUE)
summary(fit, ci = TRUE, rsquare = TRUE)
parameterEstimates(fit, se = TRUE, boot.ci.type = "perc")
# Mediation with process.R
process(data = engage, y = "stuen", x = "teachqual", m = "skilldev", model = 4, boot = 5000, seed = 2475)
View(process)
View(process)
parameterEstimates(fit, se = TRUE, boot.ci.type = "bca.simple")
# Mediation with process.R
process(data = engage, y = "stuen", x = "teachqual", m = "skilldev", model = 4, boot = 5000, seed = 2475, bc = 1)
data(Tal.Or)
media <- Tal.Or
# load all packages for this tutorial
library(psych)
library(car)
library(carData)
#install.packages("fastDummies")
library(fastDummies)
data(Tal.Or)
media <- Tal.Or
head(media)
data(Tal.Or)
media <- Tal.Or
head(media)
data(Tal.Or)
media <- Tal.Or
head(media)
media$cond <- factor(media$cond, labels = c("low media importance", "high media importance"))
str(media$cond)
lm(pmi ~ cond, media)
data(Tal.Or)
media <- Tal.Or
head(media)
media$fct_cond <- factor(media$cond, labels = c("low media importance", "high media importance"))
str(media$cond)
lm(pmi ~ cond, media)
data(Tal.Or)
media <- Tal.Or
head(media)
media$fct_cond <- factor(media$cond, levels = c(0,1), labels = c("low media importance", "high media importance"))
str(media$cond)
data(Tal.Or)
media <- Tal.Or
head(media)
media$fct_cond <- factor(media$cond, levels = c(0,1), labels = c("low media importance", "high media importance"))
str(media$fct_cond)
lm(pmi ~ fct_cond, media, contrasts = list(fct_cond = "contr.treatment"))
lm(pmi ~ fct_cond, media)
# load all packages for this tutorial
library(psych)
library(car)
library(carData)
#install.packages("fastDummies")
library(fastDummies)
data(Tal.Or)
media <- Tal.Or
head(media)
lm(pmi ~ cond, media)
options()
getOption("contrast")
getOption("contrasts")
options(contrasts = c("contr.treatment", "contr.poly"))
getOption("contrasts")
lm(reaction ~ pmi + cond, media
lm(reaction ~ pmi + cond, media)
ab <- 0.4765 * 0.5064
ab
process(data = media, y = "reaction", x = "cond", m = "pmi", model = 4, boot = 5000, seed = 2475)
set.seed(2475)
mediate(y = reaction, x = cond, m = pmi, data = media, n.iter = 5000)
set.seed(2475)
mediate(y = "reaction", x = "cond", m = "pmi", data = media, n.iter = 5000)
process(data = media, y = "reaction", x = "cond", m = "pmi", model = 4, boot = 5000, seed = 17889)
set.seed(17889)
mediate(y = "reaction", x = "cond", m = "pmi", data = media, n.iter = 5000)
set.seed(17889)
model = " # Regression models
pmi ~ a * cond
reaction ~ c * cond + b * pmi
# direct effect
direct := c
# indirect effect (a*b)
indirect := a*b
# total effect
total := c + (a*b)"
media.fit <- sem(model, data = media, se = "bootstrap", bootstrap = 5000)
summary(media.fit, ci = TRUE, rsquare = TRUE)
set.seed(17889)
model = " # Regression models
pmi ~ a * cond
reaction ~ c * cond + b * pmi
# direct effect
direct := c
# indirect effect (a*b)
indirect := a*b
# total effect
total := c + (a*b)"
media.fit <- sem(model, data = media, se = "bootstrap", bootstrap = 5000)
summary(media.fit, ci = TRUE, rsquare = TRUE)
parameterEstimates(media.fit, se = TRUE, boot.ci.type = "perc")
rscript("process.R")
Rscript("process.R")
source("process.R")
setwd("~/OneDrive - Chulalongkorn University/Documents/GitHub/r-tutorials")
source("process.R")
rmarkdown::render_site()
# load all packages for this tutorial
library(psych)
library(lavaan)
data(Tal.Or)
media <- Tal.Or
head(media)
lm(pmi ~ cond, media) # if the model is called directly, a short output is shown.
lm(reaction ~ pmi + cond, media)
ab <- 0.4765 * 0.5064
ab
source("process.R")
process(data = media, y = "reaction", x = "cond", m = "pmi", model = 4, boot = 5000, seed = 17889)
set.seed(17889)
m <- mediate(y = "reaction", x = "cond", m = "pmi", data = media, n.iter = 5000)
summary(m)
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
