avg <- sum(attitude[i,]) # will results in different values if run repeatedly
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
for (i in 1:n) {
avg <- sum(attitude[i,]) # will results in different values if run repeatedly
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
for (i in 1:n) {
avg <- sum(attitude[i,]) # will results in different values if run repeatedly
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
for (i in 1:n) {
avg <- sum(attitude[i,]) # will results in different values if run repeatedly
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
for (i in 1:n) {
avg <- sum(attitude[i,]) # will results in different values if run repeatedly
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
for (i in 1:n) {
avg <- sum(attitude[i,]) # will results in different values if run repeatedly
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
attitude$sum_score <- rowSums(attitude[, 1:7])
attitude
paste(paste("The sum of Row", which(attitude$sum_score < 400), "is less than 400."))
i <- 0
while (max(attitude$complaints) >= 50) {
i <- i + 1
attitude$complaints <- attitude$complaints - 2
print(max(attitude$complaints))
}
i
help(mean)
x <- c(1, 2, 3, NA, 5)
mean(x)
mean(x, na.rm = TRUE)
mean(x, na.rm = FALSE) # default value
n <- 50
g <- 10
paste("This class has", n, "students, which will be divided into", g, "groups. Each group will have", n/g, "students" )
center_x <- x[!is.na(x)] - mean(x, na.rm = TRUE)
center_x
sqr_x <- center_x^2
sum(sqr_x)
sum((x[!is.na(x)] - mean(x, na.rm = TRUE))^2)
data(attitude)
subset(attitude)
subset(attitude)
help(subset)
subset(attitude, subset = rating > 50)
subset(attitude, rating > 50)
subset(attitude, rating > 50, learning)
y <- c(50:150, NA, 152:300)
y
replace.na <- function(v) {
if (max(v, na.rm = TRUE) < 99) {
v[is.na(v)] <- 99
} else if (max(v, na.rm = TRUE) < 999){
v[is.na(v)] <- 999
} else {
warning("Value range contains either 99 or 999. No replacement has been performed.")
}
return(v)
}
x <- c(1:10, NA, 12:20)
x
y <- c(50:150, NA, 152:300)
y
xx <- replace.na(x)
xx
v      # variable within a function cannot be accessed outside that function
v      # variable within a function cannot be accessed outside that function
yy <- replace.na(y)
yy
z <- c(998, NA, 1000)
zz <- replace.na(z)
splitbill <- function(x, y) {        # x = bill amount, y = number of persons
each_bill <- floor(x/y)
remain <- x %% y
print(paste("Each person bill is", each_bill, "Baht, and the remainder is", remain, "Baht." ))
}
splitbill(100)     #error
splitbill(500, 3)
splitbill(300, 2)
splitbill(333, 4)
detach("package:dplyr", unload = TRUE)
detach("package:car", unload = TRUE)
library(car)
library(dplyr)
?car::recode
?dplyr::recode
gender <- c("M", "F", "F", "Gay", "Lesbian")
recode(gender, " 'M' = 'Male'; 'F' = 'Female'; else = 'LGBTQ' ")    # recode from car does not work
recode(gender, "M" = "Male", "F" = "Female", .default = "LGBTQ") #default for recode is now from dplyr
dplyr::recode(gender, "M" = "Male", "F" = "Female", .default = "LGBTQ") # same as above
car::recode(gender, " 'M' = 'Male'; 'F' = 'Female'; else = 'LGBTQ' ")       # recode from car
data(attitude)
attitude
row_s <- apply(attitude, 1, sum)      #by row
row_s
col_s <- apply(attitude, 2, sum)      #by column
col_s
rowSums(attitude) # same as above
colSums(attitude) # same as above
col_max <- apply(attitude, 2, max)      #by col
col_max
help(colMax)
data(mtcars)
mtcars
t <- tapply(mtcars$hp, mtcars$cyl, mean)
t
b <- by(mtcars$hp, mtcars$cyl, mean) #better for data frames
b
## aggregate() is better for data frames
?aggregate
aggregate(mtcars$hp, list(mtcars$cyl), mean)
aggregate(hp ~ cyl, mtcars, mean)
aggregate(hp ~ cyl + am, mtcars, mean) # multiple grouping
aggregate(cbind(hp, mpg) ~ cyl + am, mtcars, mean) # multiple grouping & multiple variable to be split
qt(.975, 20)
library(psych)
library(car)
library(carData)
# Import data
prestige <- data("Prestige")
force(Prestige)
# Import data
prestige <- data("Prestige")
force(Prestige)
# Import data
Prestige <- data("Prestige")
# Import data
Prestige <- data("Prestige")
Prestige
# Import data
prestige <- data(Prestige)
# Import data
prestige <- data(Prestige)
force(Prestige)
# Import data
prestige <- data(Prestige)
# Import data
prestige <- carData::Prestige
View(prestige)
View(prestige)
# Import data
prestige <- carData::Prestige
View(prestige)
View(prestige)
# Import data
prestige <- carData::Prestige
str(prestige)
# Import data
depress_data <- carData::Ginzberg
str(prestige)
# Import data
depress_data <- carData::Ginzberg
str(depress_data)
View(depress_data)
View(depress_data)
# Import data
prestige <- carData::Prestige
str(prestige)
# Import data
prestige <- carData::Prestige
str(prestige)
# Import data
dat <- carData::Prestige
str(dat)
pretige_lm <- lm(prestige ~ education + income + women + type, data = dat)
summary(prestige_lm)
# Import data
dat <- carData::Prestige
str(dat)
prestige_lm <- lm(prestige ~ education + income + women + type, data = dat)
summary(prestige_lm)
library(psych)
library(car)
library(carData)
# Import data
dat <- carData::Prestige
str(dat)
prestige_lm <- lm(prestige ~ education + income + women + type, data = dat)
summary(prestige_lm)
plot(prestige_lm)
plot(prestige_lm)
residualPlots(prestige_lm)
mahalanobis(dat$education)
mahalanobis(dat$education, mean(dat$education), sd(dat$education))
mahalanobis(dat$education, mean(dat$education), sd(dat$education))
mahalanobis(dat$education, mean(dat$education), cov(dat$education))
psych::outlier(dat$educati mean(dat$education), cov(dat$education))
psych::outlier(dat$education)
psych::outlier(dat[, 1:2)
psych::outlier(dat[, 1:2])
predictors <- dat[c("education", "income", "women")]
mahananobis(predictors, colMeans(predictors), cov(predictors))
predictors <- dat[c("education", "income", "women")]
mahalanobis(predictors, colMeans(predictors), cov(predictors))
predictors <- dat[c("education", "income", "women")]
maha_distance <- mahalanobis(predictors, colMeans(predictors), cov(predictors))
predictors <- dat[c("education", "income", "women")]
dat$maha_dis <- mahalanobis(predictors, colMeans(predictors), cov(predictors))
head(predictors)
predictors <- dat[c("education", "income", "women")]
dat$maha_dis <- mahalanobis(predictors, colMeans(predictors), cov(predictors))
head(dat$maha_dis)
predictors <- dat[c("education", "income", "women")]
dat$maha_dis <- mahalanobis(predictors, colMeans(predictors), cov(predictors))
head(dat)
# load all packages for this tutorial
library(emmeans)
library(psych)
library(car)
library(carData)
data(Ginzberg)
depression <- Ginzberg
head(depression)
boxplot(depression)
depression.lm <- lm(depression ~ fatalism + simplicity + fatalism:simplicity, data = depression)
summary(depression.lm)
plot(depression.lm) # assumption checks
emtrends(depression.lm, ~ simplicity , var = "fatalism", at = at_value)
# load all packages for this tutorial
library(emmeans)
library(psych)
library(car)
library(carData)
data(Ginzberg)
depression <- Ginzberg
head(depression)
boxplot(depression)
depression.lm <- lm(depression ~ fatalism + simplicity + fatalism:simplicity, data = depression)
summary(depression.lm)
plot(depression.lm) # assumption checks
emtrends(depression.lm, ~ simplicity , var = "fatalism", at = locations)
# load all packages for this tutorial
library(emmeans)
library(psych)
library(car)
library(carData)
data(Ginzberg)
depression <- Ginzberg
head(depression)
boxplot(depression)
depression.lm <- lm(depression ~ fatalism + simplicity + fatalism:simplicity, data = depression)
summary(depression.lm)
plot(depression.lm) # assumption checks
# load all packages for this tutorial
install.packages("rockchalk")
# load all packages for this tutorial
#install.packages("rockchalk")
library(emmeans)
library(psych)
library(carData)
library(rockchalk)
install.packages(c("arm", "backports", "BayesFactor", "bayestestR", "BH", "blob", "brio", "broom", "car", "carData", "checkmate", "class", "cli", "clipr", "cluster", "coin", "colorspace", "conquer", "corrplot", "cpp11", "crayon", "data.table", "datawizard", "DBI", "desc", "DescTools", "deSolve", "DiagrammeR", "diffobj", "digest", "dplyr", "dtplyr", "e1071", "effectsize", "emmeans", "EMT", "evaluate", "Exact", "fansi", "foreign", "fs", "generics", "gld", "glue", "GPArotation", "gplots", "gsl", "haven", "Hmisc", "hms", "htmlTable", "igraph", "influenceR", "insight", "jmv", "jmvcore", "jrvFinance", "jsonlite", "jtools", "knitr", "labelled", "latex2exp", "lattice", "libcoin", "lifecycle", "lme4", "lmtest", "lubridate", "magrittr", "maptools", "MASS", "Matrix", "matrixStats", "MBESS", "mgcv", "mime", "multcomp", "mvtnorm", "nlme", "nloptr", "nnet", "OpenMx", "openssl", "openxlsx", "pander", "parameters", "pbapply", "performance", "pillar", "pkgbuild", "pkgload", "plyr", "PMCMR", "polynom", "processx", "ps", "psych", "quantreg", "RColorBrewer", "Rcpp", "RcppEigen", "RcppParallel", "readr", "readxl", "reshape", "rio", "rlang", "rmarkdown", "rootSolve", "rpart", "rpf", "rprojroot", "rvest", "scales", "sem", "sjlabelled", "sjmisc", "sp", "spatial", "stringi", "survival", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tinytex", "tzdb", "uuid", "vcd", "vcdExtra", "vctrs", "viridis", "visNetwork", "vroom", "waldo", "withr", "xfun", "xml2", "yaml", "zoo"))
install.packages(c("arm", "backports", "BayesFactor", "bayestestR", "BH", "blob", "brio", "broom", "car", "carData", "checkmate", "class", "cli", "clipr", "cluster", "coin", "colorspace", "conquer", "corrplot", "cpp11", "crayon", "data.table", "datawizard", "DBI", "desc", "DescTools", "deSolve", "DiagrammeR", "diffobj", "digest", "dplyr", "dtplyr", "e1071", "effectsize", "emmeans", "EMT", "evaluate", "Exact", "fansi", "foreign", "fs", "generics", "gld", "glue", "GPArotation", "gplots", "gsl", "haven", "Hmisc", "hms", "htmlTable", "igraph", "influenceR", "insight", "jmv", "jmvcore", "jrvFinance", "jsonlite", "jtools", "knitr", "labelled", "latex2exp", "lattice", "libcoin", "lifecycle", "lme4", "lmtest", "lubridate", "magrittr", "maptools", "MASS", "Matrix", "matrixStats", "MBESS", "mgcv", "mime", "multcomp", "mvtnorm", "nlme", "nloptr", "nnet", "OpenMx", "openssl", "openxlsx", "pander", "parameters", "pbapply", "performance", "pillar", "pkgbuild", "pkgload", "plyr", "PMCMR", "polynom", "processx", "ps", "psych", "quantreg", "RColorBrewer", "Rcpp", "RcppEigen", "RcppParallel", "readr", "readxl", "reshape", "rio", "rlang", "rmarkdown", "rootSolve", "rpart", "rpf", "rprojroot", "rvest", "scales", "sem", "sjlabelled", "sjmisc", "sp", "spatial", "stringi", "survival", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tinytex", "tzdb", "uuid", "vcd", "vcdExtra", "vctrs", "viridis", "visNetwork", "vroom", "waldo", "withr", "xfun", "xml2", "yaml", "zoo"))
# load all packages for this tutorial
#install.packages("rockchalk")
library(emmeans)
library(psych)
library(carData)
library(rockchalk)
data(Ginzberg)
depression <- Ginzberg
head(depression)
boxplot(depression)
depression.lm <- lm(depression ~ fatalism + simplicity + fatalism:simplicity, data = depression)
summary(depression.lm)
plot(depression.lm) # assumption checks
emtrends(depression.lm, ~ simplicity , var = "fatalism", at = locations)
setwd("~/OneDrive - Chulalongkorn University/Documents/GitHub/r-tutorials")
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("Hmisc")
rmarkdown::render_site()
