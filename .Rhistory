} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
n <- nrow(attitude)
for (i in 1:n) {
avg <- sum(attitude[i,1:7]) # choose 1-7 instead of all column for error prevention
if (avg >= 400) {
attitude$sum_score[i] <- avg
} else if (avg < 400) {
attitude$sum_score[i] <- 99
} else {
attitude$sum_score[i] <- NA
}
}
attitude
attitude$sum_score <- rowSums(attitude[, 1:7])
attitude
paste(paste("The sum of Row", which(attitude$sum_score < 400), "is less than 400."))
i <- 0
while (max(attitude$complaints) >= 50) {
i <- i + 1
attitude$complaints <- attitude$complaints - 2
print(max(attitude$complaints))
}
i
help(mean)
x <- c(1, 2, 3, NA, 5)
mean(x)
mean(x, na.rm = TRUE)
mean(x, na.rm = FALSE) # default value
n <- 50
g <- 10
paste("This class has", n, "students, which will be divided into", g, "groups. Each group will have", n/g, "students" )
center_x <- x[!is.na(x)] - mean(x, na.rm = TRUE)
center_x
sqr_x <- center_x^2
sum(sqr_x)
sum((x[!is.na(x)] - mean(x, na.rm = TRUE))^2)
data(attitude)
subset(attitude)
subset(attitude)
help(subset)
subset(attitude, subset = rating > 50)
subset(attitude, rating > 50)
subset(attitude, rating > 50, learning)
y <- c(50:150, NA, 152:300)
y
replace.na <- function(v) {
if (max(v, na.rm = TRUE) < 99) {
v[is.na(v)] <- 99
} else if (max(v, na.rm = TRUE) < 999){
v[is.na(v)] <- 999
} else {
warning("Value range contains either 99 or 999. No replacement has been performed.")
}
return(v)
}
x <- c(1:10, NA, 12:20)
x
y <- c(50:150, NA, 152:300)
y
xx <- replace.na(x)
xx
v      # variable within a function cannot be accessed outside that function
v      # variable within a function cannot be accessed outside that function
yy <- replace.na(y)
yy
z <- c(998, NA, 1000)
zz <- replace.na(z)
splitbill <- function(x, y) {        # x = bill amount, y = number of persons
each_bill <- floor(x/y)
remain <- x %% y
print(paste("Each person bill is", each_bill, "Baht, and the remainder is", remain, "Baht." ))
}
splitbill(100)     #error
splitbill(500, 3)
splitbill(300, 2)
splitbill(333, 4)
detach("package:dplyr", unload = TRUE)
detach("package:car", unload = TRUE)
library(car)
library(dplyr)
?car::recode
?dplyr::recode
gender <- c("M", "F", "F", "Gay", "Lesbian")
recode(gender, " 'M' = 'Male'; 'F' = 'Female'; else = 'LGBTQ' ")    # recode from car does not work
recode(gender, "M" = "Male", "F" = "Female", .default = "LGBTQ") #default for recode is now from dplyr
dplyr::recode(gender, "M" = "Male", "F" = "Female", .default = "LGBTQ") # same as above
car::recode(gender, " 'M' = 'Male'; 'F' = 'Female'; else = 'LGBTQ' ")       # recode from car
data(attitude)
attitude
row_s <- apply(attitude, 1, sum)      #by row
row_s
col_s <- apply(attitude, 2, sum)      #by column
col_s
rowSums(attitude) # same as above
colSums(attitude) # same as above
col_max <- apply(attitude, 2, max)      #by col
col_max
help(colMax)
data(mtcars)
mtcars
t <- tapply(mtcars$hp, mtcars$cyl, mean)
t
b <- by(mtcars$hp, mtcars$cyl, mean) #better for data frames
b
## aggregate() is better for data frames
?aggregate
aggregate(mtcars$hp, list(mtcars$cyl), mean)
aggregate(hp ~ cyl, mtcars, mean)
aggregate(hp ~ cyl + am, mtcars, mean) # multiple grouping
aggregate(cbind(hp, mpg) ~ cyl + am, mtcars, mean) # multiple grouping & multiple variable to be split
qt(.975, 20)
knitr::opts_chunk$set(echo = TRUE)
data(mtcars) # Load mtcars into a data frame.
head(mtcars)
plot(mtcars$mpg, mtcars$hp)
covxy <- (sum((mtcars$mpg - mean(mtcars$mpg)) * (mtcars$hp - mean(mtcars$hp)))) / (nrow(mtcars) -1)
covxy
# Or use cov() function
cov(mtcars$mpg, mtcars$hp)
covxy / (sd(mtcars$mpg) * sd(mtcars$hp))
cor(mtcars$mpg, mtcars$hp)
cor.test(mtcars$mpg, mtcars$hp)
cor.test(mtcars$mpg, mtcars$hp, alternative = "less")
cor.test(mtcars$mpg, mtcars$hp)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
data(mtcars) # Load mtcars into a data frame.
head(mtcars)
plot(mtcars$mpg, mtcars$hp)
covxy <- (sum((mtcars$mpg - mean(mtcars$mpg)) * (mtcars$hp - mean(mtcars$hp)))) / (nrow(mtcars) -1)
covxy
# Or use cov() function
cov(mtcars$mpg, mtcars$hp)
covxy / (sd(mtcars$mpg) * sd(mtcars$hp))
cor(mtcars$mpg, mtcars$hp)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
data(mtcars) # Load mtcars into a data frame.
head(mtcars)
plot(mtcars$mpg, mtcars$hp)
covxy <- (sum((mtcars$mpg - mean(mtcars$mpg)) * (mtcars$hp - mean(mtcars$hp)))) / (nrow(mtcars) -1)
covxy
# Or use cov() function
cov(mtcars$mpg, mtcars$hp)
covxy / (sd(mtcars$mpg) * sd(mtcars$hp))
cor(mtcars$mpg, mtcars$hp)
cor.test(mtcars$mpg, mtcars$hp)
cor.test(mtcars$mpg, mtcars$hp, alternative = "less")
cor.test(mtcars$mpg, mtcars$hp, alternative = "less")
cor.test(mtcars$mpg, mtcars$hp)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = loess, color = "red", se = FALSE)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = gam, color = "red", se = FALSE)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE, formula = y ~ x + x^2)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE, formula = y ~ x - x^2)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE, formula = y ~ -s(log(x)))
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE, formula = y ~ 1/log(x)))
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE, formula = y ~ 1/log(x))
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE, formula = y ~ s(log(x)))
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE, formula = y ~ x^2)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE,
formula = 'y ~ expFct(x,beta1, beta2, beta3)')
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE,
formula = 'y ~ exp(x)/x')
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE,
formula = y ~ exp(x)/x)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE,
formula = y ~ -exp(x)/x)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE,
formula = y ~ exp(x)/-x)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE,
formula = y ~ log(x)/-x)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE,
formula = y ~ log(x)/x)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE,
formula = y ~ exp(x)/x)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE,
formula = y ~ x/log(x))
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE,
formula = y ~ x/exp(x))
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE,
formula = y ~ x/log(x))
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE,
formula = y ~ 1/log(x))
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE,
formula = y ~ x/log(x))
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE, formula = y ~ x/log(x))
cor.test(mtcars$mpg, mtcars$hp, method = "pearson")
cor.test(mtcars$mpg, mtcars$hp, method = "spearman")
cor.test(mtcars$mpg, mtcars$hp, method = "kendall")
# Base R: Scatter plot
plot(mtcars$hp, mtcars$mpg)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE, formula = y ~ poly(x,2))
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE, formula = y ~ poly(x,3))
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE, formula = y ~ poly(x,2))
# GGplot
library(ggplot2)
ggplot(mtcars, mapping = aes(x = hp, y = mpg)) + #define data and mapping aesthetics
geom_point() + #point geometry for scatter plot
theme_classic()
# we can save the plot as a variable for later use (output will not be shown)
p <- ggplot(mtcars, mapping = aes(x = hp, y = mpg)) +
geom_point() +
theme_classic()
# GGplot
library(ggplot2)
ggplot(mtcars, mapping = aes(x = hp, y = mpg)) + #define data and mapping aesthetics
geom_point() + #point geometry for scatter plot
theme_classic()
# We can save the plot as a variable for later use (output will not be shown)
p <- ggplot(mtcars, mapping = aes(x = hp, y = mpg)) +
geom_point() +
theme_classic()
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE, formula = y ~ poly(x,2)) +
theme_classic()
# Crate a data frame with variables to be analyzed.
corr_dat <- mtcars[, c("mpg", "cyl", "disp", "hp", "wt", "gear")]
# run a correlation
cor(corr_dat)
# Note that the upper half above a diagonal line is a mirror image of the lower half.
library("psych")
psych::corr.test(corr_dat) # Actually, you do not need to include "psych::" before "corr.test". However, it is a good practice to identify which package you are using.
library(psych)
pairs.panels(corr_dat) # input is a data frame.
corrMatrix(data = mtcars,
vars = c("mpg", "cyl", "disp", "hp", "wt", "gear"),
plots = TRUE, # scatter plots on lower half.
plotStats = TRUE, # cor coeff on upper half.
plotDens = TRUE) # density plots on diagonal.
library("psych")
psych::corr.test(corr_dat) # Actually, you do not need to include "psych::" before "corr.test". However, it is a good practice to identify which package you are using.
psych::lowerCor(corr_dat) # Show only lower half.
#corr.test(corr_dat, method = "kendall") # For Kendall's tau
psych::lowerCor(corr_dat) # Show only lower half.
library("psych")
psych::corr.test(corr_dat) # Actually, you do not need to include "psych::" before "corr.test". However, it is a good practice to identify which package you are using.
setwd("~/OneDrive - Chulalongkorn University/Documents/R Website")
# install.packages("apaTables")
# run getwd() to check your working directory.
library(apaTables)
apa.cor.table(corr_dat, filename = "APA_Corr_Table.doc")
pairs(corr_dat)
# First, we need to compute a correlation matrix.
cor_mat <- psych::corr.test(corr_dat) # Use corr.test() to create a list of output matrices.
str(cor_mat)
cor_mat$r # The first element of the list is a correlation matrix.
cor_mat$p # The fourth element is a p value matrix.
# install.packages("corrplot")
library(corrplot)
corrplot(cor_mat$r, method = "number", type = "upper", p.mat = cor_mat$p) #show cor values.
corrplot(cor_mat$r, method = "ellipse", type = "lower", p.mat = cor_mat$p) # show ellipses
install.packages(GGally)
library("GGally")
install.packages("GGally")"
library("GGally")
install.packages("GGally")
library("GGally")
install.packages("GGally")
knitr::opts_chunk$set(echo = TRUE)
# install.packages("GGally")
library("GGally")
# install.packages("GGally")
library("GGally")
ggally_cor(corr_dat)
# install.packages("GGally")
library("GGally")
ggpairs(corr_dat)
# install.packages("GGally")
library("GGally")
ggpairs(corr_dat, lower=list(continuous="smooth")
# install.packages("GGally")
library("GGally")
ggpairs(corr_dat, lower=list(continuous="smooth"))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
data(mtcars) # Load mtcars into a data frame.
head(mtcars)
plot(mtcars$mpg, mtcars$hp)
covxy <- (sum((mtcars$mpg - mean(mtcars$mpg)) * (mtcars$hp - mean(mtcars$hp)))) / (nrow(mtcars) -1)
covxy
# Or use cov() function
cov(mtcars$mpg, mtcars$hp)
covxy / (sd(mtcars$mpg) * sd(mtcars$hp))
cor(mtcars$mpg, mtcars$hp)
cor.test(mtcars$mpg, mtcars$hp)
cor.test(mtcars$mpg, mtcars$hp, alternative = "less")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE, formula = y ~ poly(x,2)) +
theme_classic()
cor.test(mtcars$mpg, mtcars$hp, method = "pearson")
cor.test(mtcars$mpg, mtcars$hp, method = "spearman")
cor.test(mtcars$mpg, mtcars$hp, method = "kendall")
# Base R: Scatter plot
plot(mtcars$hp, mtcars$mpg)
# GGplot
library(ggplot2)
ggplot(mtcars, mapping = aes(x = hp, y = mpg)) + #define data and mapping aesthetics
geom_point() + #point geometry for scatter plot
theme_classic()
# We can save the plot as a variable for later use (output will not be shown)
p <- ggplot(mtcars, mapping = aes(x = hp, y = mpg)) +
geom_point() +
theme_classic()
# Crate a data frame with variables to be analyzed.
corr_dat <- mtcars[, c("mpg", "cyl", "disp", "hp", "wt")]
# run a correlation
cor(corr_dat)
library("psych")
psych::corr.test(corr_dat) # Actually, you do not need to include "psych::" before "corr.test". However, it is a good practice to identify which package you are using.
psych::lowerCor(corr_dat) # Show only lower half.
# install.packages("apaTables")
# run getwd() to check your working directory.
library(apaTables)
apa.cor.table(corr_dat, filename = "APA_Corr_Table.doc")
pairs(corr_dat)
library(psych)
pairs.panels(corr_dat) # input is a data frame.
# install.packages("GGally")
library("GGally")
ggpairs(corr_dat, lower=list(continuous="smooth"))
# install.packages("GGally")
library("GGally")
ggpairs(corr_dat, lower=list(continuous = "smooth_lm"))
# install.packages("GGally")
library("GGally")
ggpairs(corr_dat, lower=list(continuous = "smoot"))
# install.packages("GGally")
library("GGally")
ggpairs(corr_dat, lower=list(continuous = "smooth"))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
data(mtcars) # Load mtcars into a data frame.
head(mtcars)
plot(mtcars$mpg, mtcars$hp)
covxy <- (sum((mtcars$mpg - mean(mtcars$mpg)) * (mtcars$hp - mean(mtcars$hp)))) / (nrow(mtcars) -1)
covxy
# Or use cov() function
cov(mtcars$mpg, mtcars$hp)
covxy / (sd(mtcars$mpg) * sd(mtcars$hp))
cor(mtcars$mpg, mtcars$hp)
cor.test(mtcars$mpg, mtcars$hp)
cor.test(mtcars$mpg, mtcars$hp, alternative = "less")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
geom_smooth(method = "gam", color = "red", se = FALSE, formula = y ~ poly(x,2)) +
theme_classic()
cor.test(mtcars$mpg, mtcars$hp, method = "pearson")
cor.test(mtcars$mpg, mtcars$hp, method = "spearman")
cor.test(mtcars$mpg, mtcars$hp, method = "kendall")
# Base R: Scatter plot
plot(mtcars$hp, mtcars$mpg)
# GGplot
library(ggplot2)
ggplot(mtcars, mapping = aes(x = hp, y = mpg)) + #define data and mapping aesthetics
geom_point() + #point geometry for scatter plot
theme_classic()
# We can save the plot as a variable for later use (output will not be shown)
p <- ggplot(mtcars, mapping = aes(x = hp, y = mpg)) +
geom_point() +
theme_classic()
# Crate a data frame with variables to be analyzed.
corr_dat <- mtcars[, c("mpg", "cyl", "disp", "hp", "wt")]
# run a correlation
cor(corr_dat)
library("psych")
psych::corr.test(corr_dat) # Actually, you do not need to include "psych::" before "corr.test". However, it is a good practice to identify which package you are using.
psych::lowerCor(corr_dat) # Show only lower half.
# install.packages("apaTables")
# run getwd() to check your working directory.
library(apaTables)
apa.cor.table(corr_dat, filename = "APA_Corr_Table.doc")
pairs(corr_dat)
library(psych)
pairs.panels(corr_dat) # input is a data frame.
# install.packages("GGally")
library("GGally")
ggpairs(corr_dat, lower=list(continuous = "smooth_lm"))
library("psych")
psych::corr.test(corr_dat) # Actually, you do not need to include "psych::" before "corr.test". However, it is a good practice to identify which package you are using.
rmarkdown::render_site()
setwd("~/GitHub/r-tutorials")
rmarkdown::render_site()
getwd()
file.create('.nojekyll')
ls
ls()
dir()
ls
getwd()
dir()
list.files()
setwd("~/GitHub/r-tutorials")
rmarkdown::render_site()
rmarkdown::render_site()
setwd("~/OneDrive - Chulalongkorn University/Documents/R Website")
setwd("~/OneDrive - Chulalongkorn University/Documents/GitHub/r-tutorials")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
